sw 0,0,62                   # k = 0
read_input: addi 3,0,55        # reads input and goes to save stone if reg7 = 55
  beq 3,7,check_avail
  beq 0,0,read_input            # 63 = mem_k, 64 = mem_i
check_avail: add 2,1,0                      # mem_line[(7*k)] //reg2 = reg1(k)
  addi 3,0,7                     # reg3 = 7
  addi 4,0,multiply              # goes to multiply
  jalr 7,4
  add 1,1,6                      # reg6 = 7*k + 2
  lw 2,1,0                       # reg2 = mem_line [ 7*k + 2]
  beq 2,0,save_stone
  addi 4,0,for_loop_k            # go to k = k + 1
  jalr 7,4
  addi 3,0,rows                  # if k = limit
  beq 3,1,read_input             # if k reaches limit go to read_input
  beq 0,0,check_avail
save_stone:  addi 5,5,1                     # increment player by 1 cause now it is 0/1
  sw 5,2,0
horizontal:  add 5,0,0
  add 6,0,0
  sw 0,0,mem_k                   # k = 0
  sw 0,0,mem_i                   # i = 0
horiz_start:  add 2,1,0                      # mem_line[(7*k)+i] //reg2 = reg1(k)
  addi 3,0,7                     # reg3 = 7
  addi 4,0,multiply              # goes to multiply
  jalr 7,4
  lw 3,0,mem_i                   # reg3 = i
  add 1,3,0                      # reg1 = i + multiply
  addi 4,0,checks                # call for checks
  jalr 7,4
  addi 4,0,for_loop_i            # go to i = i + 1
  jalr 7,4
  addi 3,0,cols                  # if i = limit
  beq 3,2,horiz_lp_start
  beq 0,0, horiz_start
horiz_lp_start:  addi 4,0,for_loop_k            # go to k = k + 1
  jalr 7,4
  addi 3,0,rows                  # if k = limit
  beq 3,1,vertical
  beq 0,0,horiz_start
vertical:  add 5,0,0
  add 6,0,0
  sw 0,0,mem_k                   # k = 0
  sw 0,0,mem_i                   # i = 0
vertic_start:  add 2,1,0                      # mem_line[(7*k)+i] //reg2 = reg1(k)
  addi 3,0,7                     # reg3 = 7
  addi 4,0,multiply              # goes to multiply
  jalr 7,4
  lw 3,0,mem_i                   # reg3 = i
  add 1,3,0                      # reg1 = i + multiply
  addi 4,0,checks                # call for checks
  jalr 7,4
  addi 4,0,for_loop_k            # go to k = k + 1
  jalr 7,4
  addi 3,0,rows                  # if k = limit
  beq 3,1,vertic_lp_start
  beq 0,0, vertic_start
vertic_lp_start:  addi 4,0,for_loop_i            # go to i = i + 1
  jalr 7,4
  addi 3,0,cols                  # if i = limit
  beq 3,2,read_input
  beq 0,0,vertic_start
for_loop_k:  lw 1,0,mem_k
  addi 1,1,1                     # k = k + 1
  sw 1,0,mem_k
  jalr 4,7
for_loop_i:  lw 2,0,mem_i
  addi 2,2,1                     # i = i + 1
  sw 2,0,mem_i
  jalr 4,7
checks:  lw 2,1,0                       # reg2 = memline[]
  addi 1,0,1                     # reg1 = 1
  beq 1,2,is_player_1
  addi 1,0,2                     # reg1 = 2
  beq 1,2,is_player_2
  addi 1,0,0                     # reg1 = 0
  beq 1,2,is_empty               # when one of these is true jumps to main code
is_player_1:  addi 6,0,0                     # player2 sum = 0
  addi 5,5,1                     # player1 sum += 1
  beq 5,4,player1win
  jalr 4,7
is_player_2:  addi 5,0,0         # player1 sum = 0
  addi 6,6,1                     # player2 sum += 1
  beq 6,4,player2win
  jalr 4,7
is_empty:  add 5,0,0             # player1 sum = 0
  add 6,0,0                      # player2 sum = 0
  jalr 4,7
multiply:  add 1,0,0             # reg1 is our "storage" a=>reg2, b=>reg3
  lui 4,1023
  addi 4,0,62                    # create -1
MulLoop:  add 1,2,1              # reg1<=reg1+a
  add 3,3,4                    # decrease b by 1
  beq 3,0,end_mul                # if b=0 escape loop
  beq 3,3,MulLoop                # if b=b go to MulLoop
end_mul:  jalr 3,7               # goes to the address previous of multiplication
check_finish:  beq 0,0,read_input
player1win:  addi 1,0,1
  addi 2,0,0
  addi 3,0,41
  sw 1,2,0
  beq 2,3,end
  beq 0,0,player1win
player2win:  addi 1,0,2
  addi 2,0,0
  addi 3,0,41
  sw 1,2,0
  beq 2,3,end
  beq 0,0,player2win
rows:          .fill 5
cols:          .fill 6
mem_k:         .fill 62
mem_i:         .fill 63
end:  add 0,0,0
